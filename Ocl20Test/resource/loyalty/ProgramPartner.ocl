context ProgramPartner 
  inv nrOfParticipants: 
  numberOfCustomers = programs.participants->size()

context ProgramPartner 
  inv nrOfParticipants2: 
  numberOfCustomers = programs.participants->asSet()->size()

context ProgramPartner 
  inv totalPoints: 
  deliveredServices.transactions.points->sum() < 10000

context ProgramPartner 
  inv totalPointsEarning: 
  deliveredServices.transactions 
  ->select( oclIsTypeOf( Earning ) ).points->sum() < 10000 

  /* the following invariant states that the maximum number of points 
  that may be earned by all services of a program partner is equal 
  to 10,000 
  */

context ProgramPartner 
  inv totalPointsEarning2: 
  deliveredServices.transactions -- all transactions 
  ->select( oclIsTypeOf( Earning ) ) -- select earning ones 
  .points->sum() -- sum all points 
  < 10000 -- sum smaller than 10,000

context ProgramPartner 
  inv: self.programs.partners->select(p : ProgramPartner | p <> self)->isEmpty()

context ProgramPartner 
  def: getBurningTransactions(): Set(Transaction) = 
  self.deliveredServices.transactions->iterate( 
				  t : Transaction; 
				  resultSet : Set(Transaction) = Set{} | 
					  if t.oclIsTypeOf( Burning ) then 
					  	resultSet->including( t ) 
					  else 
					  	resultSet 
					  endif 
				  )
